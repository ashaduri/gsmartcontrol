/**************************************************************************
 Copyright:
      (C) 2003 - 2008  Irakli Elizbarashvili <ielizbar 'at' gmail.com>
      (C) 2008  Alexander Shaduri <ashaduri 'at' gmail.com>

 License:

 This software is provided 'as-is', without any express or implied
 warranty.  In no event will the authors be held liable for any damages
 arising from the use of this software.

 Permission is granted to anyone to use this software for any purpose,
 including commercial applications, and to alter it and redistribute it
 freely, subject to the following restrictions:

 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software
    in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Altered source versions must be plainly marked as such, and must not be
    misrepresented as being the original software.
 3. This notice may not be removed or altered from any source distribution.
***************************************************************************/

#ifndef RMN_RESOURCE_DATA_MULTI_H
#define RMN_RESOURCE_DATA_MULTI_H

#include <stdint.h>
#include <string>
#include <string.h>
#include <iostream>
#include <iomanip>
#include <stack>
#include <algorithm>
#include <stdint.h>



#error NOT IMPLEMENTED!


// multiple-type data for resource_node


namespace rmn {


enum type_t {
	R_EMPTY,
	R_INT,
	R_DOUBLE,
	R_STRING,
	R_IDENT,
	R_VOID_PTR,
	R_UNKNOWN
};



class resource_data_multi {

	protected:

		bool copy_data_from(resource_data_multi* src)
		{
			set_type(src->get_type());
			set_typename(src->get_typename());

			data_i = src->data_i;
			data_d = src->data_d;
			data_s = src->data_s;
			data_pv = src->data_pv;
		}


	public:


		void		set_typename(const char* s){ c_typename = s; }
		void		set_typename(std::string& s){ c_typename = s; }
		const char*	get_typename(){ return c_typename.c_str(); }


		type_t		get_type() const { return c_type; }
		void		set_type(type_t t) { c_type = t; }

		bool		set_data(const char*, void*);
		bool		get_data(const char*, void**);
		bool		set_data(const char*, int32_t);
		bool		get_data(const char*, int32_t&);
		bool		set_data(const char*, int64_t);
		bool		get_data(const char*, int64_t&);
		bool		set_data(const char*, double);
		bool		get_data(const char*, double&);
		bool		set_data(const char*, const std::string);
		bool		get_data(const char*, std::string&);


		bool		set_data(void*);
		bool		get_data(void**);
		bool		set_data(int32_t);
		bool		get_data(int32_t&);
		bool		set_data(int64_t);
		bool		get_data(int64_t&);
		bool		set_data(double);
		bool		get_data(double&);
		bool		set_data(const std::string);
		bool		get_data(std::string&);



		// data
		int64_t		data_i;
		double		data_d;
		std::string	data_s;
		void*		data_pv;

		type_t		c_type;
		std::string	c_typename;




};



dump_data_to_string()
{

	std::string value;
	std::stringstream terp;
	switch(get_type()){
		case R_INT:
			int64_t i;
			get_data(i);
			terp << i;
			terp >> value;
		break;
		case R_DOUBLE:
			double d;
			get_data(d);
			terp << d;
			terp >> value;
		break;
		case R_STRING:
			get_data(value);
		break;
		default:
			value = get_typename();
		break;
	}

}





//------------------------------------------------------------------------------
bool	resource_node::set_data(const char* name, void* pv)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(pv);
	return true;
}

bool	resource_node::get_data(const char* name, void** pv)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(pv);
}

bool	resource_node::set_data(const char* name, int32_t i)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(i);
	return true;
}

bool	resource_node::set_data(const char* name, int64_t i)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(i);
	return true;
}


bool	resource_node::get_data(const char* name, int32_t& i)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(i);
}

bool	resource_node::get_data(const char* name, int64_t& i)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(i);
}


bool	resource_node::set_data(const char* name, double d)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(d);
	return true;
}


bool	resource_node::get_data(const char* name, double& d)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(d);
}


bool	resource_node::set_data(const char* name, const std::string s)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(s);
	return true;
}


bool	resource_node::get_data(const char* name, std::string& s)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(s);
}

bool	resource_node::set_data(const char* name, const resource_base_ptr s)
{
	resource_node_ptr p = find_node(name);
	if(!p){
		build_nodes(name);
		p = find_node(name);
	}
	p->set_data(s);
	return true;
}


bool	resource_node::get_data(const char* name, resource_base_ptr& s)
{
	resource_node_ptr p = find_node(name);
	if(!p)
		return false;
	return p->get_data(s);
}


//------------------------------------------------------------------------------



//------------------------------------------------------------------------------
bool	resource_node::set_data( void* pv)
{
	set_type(R_VOID_PTR);
	set_typename("VOID_PTR");
	data_pv = pv;
//	debug_printf("resource_node::set_data( void* pv): %X, %X\n", pv, data_pv);
	return true;
}

bool	resource_node::get_data( void** pv)
{
	if(get_type() != R_VOID_PTR)
		return false;
	*pv = data_pv;
//	debug_printf("resource_node::get_data( void** pv): %X, %X\n", pv, *pv);
	return true;
}

bool	resource_node::set_data( int32_t i)
{
	set_type(R_INT);
	set_typename("INT");
	data_i = i;
	return true;
}

bool	resource_node::set_data( int64_t i)
{
	set_type(R_INT);
	set_typename("INT");
	data_i = i;
	return true;
}


bool	resource_node::get_data( int32_t& i)
{
	if(get_type() != R_INT)
		return false;
	i = (int)data_i;
	return true;
}

bool	resource_node::get_data( int64_t& i)
{
	if(get_type() != R_INT)
		return false;
	i = data_i;
	return true;
}


bool	resource_node::set_data( double d)
{
	set_type(R_DOUBLE);
	set_typename("DOUBLE");
	data_d = d;
	return true;
}


bool	resource_node::get_data( double& d)
{
	if(get_type() != R_DOUBLE)
		return false;
	d = data_d;
	return true;
}


bool	resource_node::set_data( const std::string s)
{
	set_type(R_STRING);
	set_typename("STRING");
	data_s = s;
	return true;
}


bool	resource_node::get_data( std::string& s)
{
//	if(get_type() != R_STRING ||get_type() != R_IDENT)
	if(get_type() != R_STRING)
		return false;
	s = data_s;
	return true;
}


bool	resource_node::set_data( const resource_base_ptr s)
{
	set_type(R_REFERENCED);
	set_typename("REFERENCED");
	data_ref_ptr = s;
	return true;
}


bool	resource_node::get_data( resource_base_ptr& s)
{
	if(get_type() != R_REFERENCED)
		return false;
	s = data_ref_ptr;
	return true;
}








} // namespace




#endif
