

GTKMM Notes:

To transfer an ownership from your local code to a container, use
Gtk::Button* pButton = Gtk::manage(new Gtk::Button("Test"));
container->add(*pButton);
(add() takes an object by reference).
otherwise, you will need to delete() it.

local scope destruction also works if using stack variables.
{
	Gtk::Button aButton;
	// destroyed here
}


A treeview (also iconview, combobox) from glade comes
with existing model, which should be unset.




--------------------------------------------------------

TODO:

+Clear the test message area when starting a new test.

+Support launching from read-only media (win32 zip version) (seems like this was a windows problem).

Testing: If ETA time has elapsed, but it's still only at 10% completion,
	ETA 0 is displayed. Fix.

Testing: If smartctl -t ... returns an error, testing=true should not be set.

Testing: Detect running tests on launch (maybe ask the user too? some tests
	may be stuck due to bad firmware).

Testing: Allow quitting when test is running (ask first).

Add ability to configure default save filename (in config-file only):
	"{serial}-{model}-{date}.txt", with the default being "{model}-{date}.txt".

Add string_replace_linear(), where multiple strings are replaced into the
	original string (as opposed to previous result).


Add support for launching with consolehelper (from usermode package).
	Fedora uses this by default.
	Investigate Fedora selinux situation.
	usermode-gtk contains consolehelper-gtk, not sure about our package
		requirement. consolehelper-gtk is not supposed to be launched by user,
		but I think we can check it with "which".
		http://fedoranews.org/contributors/matt_hansen/nautilus/

Highlight soft-warning-having devices too (configurable?).

When adding device, have an option to specify "-d" type and other parameters.
	This is needed to support multi-disk devices.

Add "Show output" button to the devices with "No further info available...".

Patch pangomm for Pango::strip_markup().

No Gtk::AboutDialog::set_logo(NULL);


libdebug:
	per-channel disabling.
	per-channel formatting.
	all flags should be per-channel.
	bug: if -q is passed, Execution log doesn't contain libdebug log. (requires per-channel status control).
	use format_time() instead of ctime() and friends, with ISO formatting.



If the detection executes "smartctl -i", don't execute it again afterwards.


RAID:
http://sourceforge.net/apps/trac/smartmontools/wiki/Supported_RAID-Controllers

Areca Linux:
	Call as: smartctl -i -d areca,[1-24] /dev/sg0
	Detection:
	Check if /proc/scsi/sg/device_strs contains "Areca       RAID controller".
		If not, there's no Areca controller present.
	Check /proc/scsi/sg/devices, the line # with type 3 is the sg* number.
		The "host" field value is the N value in /sys, see below.
	Check /sys/bus/scsi/devices/hostN/scsi_host/hostN/host_fw_hd_channels, set
		its contents as the number of ports. If not present, use 24.
	Probe each port for a valid drive: If the output contains "Device Read Identity Failed",
		then there is no drive on that port (or Areca has an old firmware, nothing we can
		do there).
	Notification: If /sys/bus/scsi/devices/hostN/scsi_host/hostN/host_fw_version
		is older than "V1.46 2009-01-06", notify the user (maybe its better to grep
		the smartctl output for that on port 0?).


3ware Linux:
	Call as: smartctl -i -d 3ware,[0-127] /dev/twa[0-15]  (or twe[0-15])
	Use twe* for [678]xxx series, and twa* for 9xxx series.
	Note: twe* devices are limited to [0-15] ports (not sure about this).
	Note: /dev/tw* devices may not exist, they are created by smartctl on the first run.
	Note: for twe*, /dev/sda may also exist (to be used with -d 3ware,N), we should
		somehow detect and ignore them.
	Note: when specifying non-existent port, either a "Device Read Identity Failed"
		error, or a "blank" info may be returned.
	Detection:
	Grep /proc/devices for "twa" or "twe" (e.g. "251 twa"). Use this for /dev/tw* part.
	Grep /proc/scsi/scsi for AMCC (3ware, LSI too?), use number of matched lines N
		for /dev/tw*[0, N-1].


3ware FreeBSD:
	Call as: smartctl -i -d 3ware,[0-127] /dev/twa0  (or twe0)


3ware Windows:
	For 9xxx only.
	Call as: smartctl -i sd[a-z],N
		N is port, a-z is logical drive (unit) provided by controller.
	Call as: smarctl -i tw_cli/cx/py
		This runs tw_cli tool and parses the output; controller x, port y.
		tw_cli is needed for 64-bit systems, as well as older controllers.
		In tw_cli mode only limited information-gathering is supported.


LSI MegaRAID (SCSI/SAS), Linux:
	Call as: smartctl -i -d megaraid,[0-?] /dev/sda


HighPoint RocketRAID ((S)ATA) Linux:
	Call as: smartctl -i -d hpt,[1-8]/[1-8] /dev/sda
	Call as: smartctl -i -d hpt,[1-8]/[1-8]/[1-15] /dev/sda
	Note: /dev/sda should be derived from this controller.
	Smartctl docs specify smaller limits, but the code says these are the ones.


HighPoint RocketRAID ((S)ATA) FreeBSD:
	Call as: smartctl -i -d hpt,[1-8]/[1-8] /dev/hptrr
	Call as: smartctl -i -d hpt,[1-8]/[1-8]/[1-15] /dev/hptrr
	Note: /dev/hptrr should be derived from this controller.
	Smartctl docs specify smaller limits, but the code says these are the ones.


CCISS (HP (Compaq) Smart Array Controller) Linux:
	Call as: smartctl -a -d cciss,[0-15] /dev/cciss/c0d0
	c0d0 is the controller (d0 seems to be a logical
		drive, but it doesn't seem to matter?).
	An unofficial patch adds support for [0-127] ports.


CCISS (HP (Compaq) Smart Array Controller) FreeBSD:
	Seems to be the same as Linux (uses the same driver?).





'-l sataphy' -> SATA Phy event counters: Non-SMART feature, useful to detect SATA cabling problems.

'-l xerror' -> Extended Comprehensive Error log: An multi-sector and
LBA48 capable version of '-l error'. Output is similar, except more
entries can exists and the high bytes of the registers are also printed.
Some newer drives (Samsung) only write to this log.

'-l scttemp' -> SCT Temperature history table. See below.

'-l xselftest' -> Extended Self Test Log: An multi-sector and LBA48
capable version of '-l selftest'. Output will be similar, except more
entries can exists and the LBA values can be somewhat longer.

"smartctl -l this_wont_exist" gives the list of supported logs - this
	is needed to detect xerror / xselftest support in smartctl.


Careful with GPL (xerror...) stuff until the jmicron situation clears up.

Add detection for Interix (i586-pc-interix3), maybe with debian?

Re-check long double printing - win32 libc doesn't support it, a cast
to double is needed.
	The underlying problem is that in msvc, long double is the same size
	as double, so printf() has mingw-incompatible presentation of long double.

Support USB flash disks in CVS smartctl versions:
	Try smartctl -i /dev/sdc;
	If it returns "Smartctl: please specify device type with the -d option.",
	try "-d scsi", which should at least give us the name.

Maybe make it easier to specify "-d" (with a dropdown?)
	Not sure, "-l aaa /tmp" doesn't list all types.



----------- Feature List ----------

+Autodetect available devices

+Select current device (from autodetected list; manually whitelist devices).

+Smartctl binary (text entries in Options - binary, default command line options).
+	Global command-line options for smartctl.
+	Command-line options per-device in settings (e.g. -d ata).
+	Search smartctl binary on startup (try to execute it with --version). If it's not there, alert the user.

+Indicate which of the devices has SMART supported / enabled.
+	Enable / disable smart on devices.
+		Indicate that this is until shutdown (but may be preserved on reboot).
+	Direct them to smartd / smartctl documentation for permanent enabling.
+		NOTE: SMART is sometimes preserved across power cycles.

+Enable / disable Automatic Offline Data Collection for devices. (-o on)
+	Show its status in the main window.

+Show identity information for device (aka short info), --info.

+Show all SMART information for device (--all), includes:
+	* Short info (--info)
+	* SMART DATA
+		* overall-health (-H, --health) - may check this automatically as well.
+		* General SMART Values, aka Capabilities (-c, --capabilities)
+		* Attributes (-A, --attributes). These need decoding.
+		* Error Log (-l error)
+		* Self-test log (-l selftest)
+		* Selective self-test log and settings
		* SCT status and other stuff
			Display temperature somewhere (use SCT or Attr 194 for this).
+	* Ability to save this information to a file.
+	* On info window show: Ask to turn SMART on if it's disabled

+Program error reporting:
+	invalid smartmontools version.
+	cannot parse output - show log.
+	smartctl exited with error - look it up in error map.


SCT Temperatures
	-l scttemp prints temperature and history.
	-t scttempint,N[,p] (N - count, p - preserve across reset or not).
		This configures temperature logging interval (1 min by default) and clears the history.


+Tests:
	Ability to detect a testing drive on boot, show its info with testing tab.

	Run one-time Immediate Offline test (-t offline).
		Offline tests only update Attributes, and if errors are found they will
		appear in SMART error log. Self-test logs are unaffected.
		Abort (-X). Abort works with Offline only if there's
		"Abort Offline collection upon new command" capability.
		If the drive has "Suspend Offline collection upon new  command" capability,
		immediate offline test may be tracked through --capabilities (not on mine!).
		If it's "Abort Offline collection upon new command", then the test
		will abort on --capabilities or --abort.


Polling time
The self-test routine recommended polling time shall be equal to the number of minutes that is the minimum
recommended time before which the host should first poll for test completion status. Actual test time could
be several times this value. Polling before this time could extend the self-test execution time or abort the test
depending on the state of bit 2 of the off-line data capability bits.

Autosave
This command enables and disables the optional attribute autosave feature of the device. This command
may either allow the device, after some vendor specified event, to save the device updated attribute values
to non-volatile memory; or this command may cause the autosave feature to be disabled. The state of the
attribute autosave feature (either enabled or disabled) shall be preserved by the device across power cycles.
A value of zero written by the host into the device’s Sector Count register before issuing this command shall
cause this feature to be disabled. Disabling this feature does not preclude the device from saving SMART
data to non-volatile memory during some other normal operation such as during a power-on or power-off
sequence or during an error recovery sequence.
A value of F1h written by the host into the device’s Sector Count register before issuing this command shall
cause this feature to be enabled. Any other meaning of this value or any other non-zero value written by the
host into this register before issuing this command may differ from device to device. The meaning of any
non-zero value written to this register at this time shall be preserved by the device across power cycles.



